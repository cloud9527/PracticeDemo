import java.lang.reflect.Array
import java.lang.reflect.Field


apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.cloud.mypriatice"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //加上这句话
        multiDexEnabled true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })




    testCompile 'junit:junit:4.12'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.jakewharton:butterknife:8.4.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    //dagger
    compile 'com.google.dagger:dagger:2.5'
    compile 'com.google.dagger:dagger-compiler:2.5'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'com.android.support:multidex:1.0.1'

    testCompile 'junit:junit:4.12'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'

    //Retrofit2所需要的包
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    //ConverterFactory的Gson依赖包
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    //ConverterFactory的String依赖包
    compile 'com.squareup.retrofit2:converter-scalars:2.0.0-beta4'

}


def patchKeepSpecs() {
    def clazz = Class.forName("com.android.build.gradle.internal.tasks.multidex.CreateManifestKeepList")
    def keepSpecsField = clazz.getDeclaredField("KEEP_SPECS")
    keepSpecsField.setAccessible(true)
    def keepSpecs = (Map) keepSpecsField.get(null)

    println "\nKEEP_SPECS **before** patch:"
    for (def item : keepSpecs) {
        if (item) {
            println item
        }
    }
    println ''
    excludeElement(keepSpecs, "activity")

    println "\nKEEP_SPECS **after** patch:"
    for (def item : keepSpecs) {
        if (item) {
            println item
        }
    }
    println ''
}

def excludeElement(keepSpecs, element) {
    Class mapClazz = Class.forName("com.google.common.collect.RegularImmutableMap")
    Field tableField = mapClazz.getDeclaredField("table")
    tableField.setAccessible(true)
    def table = tableField.get(keepSpecs)

    def index = getElementIndex(table, element)
    if (index == -1) {
        println "KEEP_SPECS (table): no '$element' found"
    } else {
        Array.set(table, index, null)
        println "KEEP_SPECS (table) patched: removed '$element' root"
    }

    def entriesField = mapClazz.getDeclaredField("entries")
    entriesField.setAccessible(true)
    def entries = entriesField.get(keepSpecs)

    index = getElementIndex(entries, element)
    if (index == -1) {
        println "KEEP_SPECS (entries): no '$element' found"
    } else {
        Array.set(entries, index, null)
        println "KEEP_SPECS (entries) patched: removed '$element' root"
    }
}

def getElementIndex(container, element) {
    int length = Array.getLength(container)
    for (int i = 0; i < length; ++i) {
        def entry = Array.get(container, i)
        if (entry != null) {
            if (element.equals(entry.getKey())) {
                return i
            }
        }
    }
    return -1
}


patchKeepSpecs()

